{"version":3,"file":"react-modal-better-hooks.esm.js","sources":["../../src/constants.ts","../../src/reducer.ts","../../src/mounter.tsx","../../src/context.tsx","../../src/hooks/useOpenModal.ts","../../src/hooks/useCloseModal.ts","../../src/hooks/useUpdateModal.ts","../../src/hooks/useRegisterModal.ts","../../src/index.ts"],"sourcesContent":["export enum ModalActionType {\n  OpenModal = 'OpenModal',\n  UpdateModal = 'UpdateModal',\n  CloseModal = 'CloseModal',\n  CloseAllModals = 'CloseAllModals',\n\n  RemoveModal = 'RemoveModal',\n  RegisterModal = 'RegisterModal',\n  LazyModalLoaded = 'LazyModalLoaded',\n  LoadLazyModal = 'LoadLazyModal'\n}\n","import { ComponentType } from 'react'\nimport produce from 'immer'\n\nimport { ModalActionType } from './constants'\nimport { Importer, CloseModalParams, OpenModalParams, AddLazyModalParams, ActionsMap, Actions, ModalItem, ModalStateMap } from './types'\n\nexport const initialState = new Map()\n\nexport const reducer = produce(\n  (state: ModalStateMap, action: Actions): ModalStateMap => {\n    const { id: payloadId, props: payloadProps, loader, component, loadFailed, shouldComponentLoad, loaded } = action.payload ?? {}\n    const allKeys: Array<string> = Array.from(state.keys())\n    const registed: boolean = state.has(payloadId)\n\n    let currentModal: ModalItem | undefined = state.get(payloadId)\n\n    switch (action.type) {\n      // case ModalActionType.OpenModal:\n      //   if (registed) {\n      //     if (currentModal) {\n      //       currentModal.opened = true\n      //       currentModal.props = payloadProps\n      //     }\n      //   } else {\n      //     currentModal = Object.assign({}, action.payload, {\n      //       opened: true,\n      //     })\n      //   }\n\n      //   state.set(payloadId, currentModal as ModalItem)\n      //   return state\n\n      // case ModalActionType.UpdateModal:\n      //   if (currentModal) {\n      //     currentModal.opened = true\n      //     currentModal.props = payloadProps\n      //     state.set(payloadId, currentModal as ModalItem)\n      //   }\n      // return state\n\n\n      // case ModalActionType.CloseModal:\n      //   if (currentModal) {\n      //     currentModal.opened = false\n      //     state.set(payloadId, currentModal)\n      //   }\n      //   return state\n\n      // case ModalActionType.CloseAllModals:\n      //   allKeys.forEach((key: string) => {\n      //     currentModal = state.get(key) as ModalItem\n      //     currentModal.opened = false\n      //     state.set(key, currentModal)\n      //   })\n      //   return state\n\n      case ModalActionType.RegisterModal:\n        if (!registed) {\n          state.set(payloadId, {\n            ...action.payload,\n            id: payloadId,\n            props: {}\n          } as ModalItem)\n        }\n        return state\n\n      case ModalActionType.LoadLazyModal:\n        if (currentModal) {\n          currentModal.loading = true\n          currentModal.loadFailed = false\n        }\n        return state\n\n      // case ModalActionType.LazyModalLoaded:\n      //   if (currentModal) {\n      //     currentModal.loaded = loaded\n      //     currentModal.loadFailed = loadFailed\n      //     currentModal.loading = false\n      //     currentModal.component = component\n      //     state.set(payloadId, currentModal as ModalItem)\n      //   }\n      //   return state\n\n      default:\n        return state\n    }\n  }\n)\n","import React, { FC, useEffect, useMemo, createElement, ReactElement } from 'react'\n\nimport { useModalContext } from './context'\nimport { ModalItem } from './types'\nimport { ModalActionType } from './constants'\n\nexport const WrappedModalComponent: FC<any> = ({\n  render,\n  modalProps,\n  opened,\n  renderIfClosed\n}): ReactElement | null => {\n  if ((!opened && !renderIfClosed) || !render) {\n    return null\n  }\n\n  return <>{render(modalProps)}</>\n}\n\n\nexport const Mounter: FC = () => {\n  const { state, dispatch } = useModalContext()\n  const mountableCompnent = useMemo(() => {\n    const entries: IterableIterator<ModalItem> = state.values()\n    const components: ReactElement[] = []\n\n    for (const entry of entries) {\n      if (entry.component) {\n        components.push(createElement(WrappedModalComponent, {\n          render: entry.component,\n          modalProps: {},\n          renderIfClosed: false,\n          opened: false,\n          key: entry.id\n        }))\n      }\n    }\n\n    return components\n  }, [state])\n\n  useEffect(() => {\n    const entries = state.values()\n\n    for (const entry of entries) {\n      if (entry.isLazy && !entry.loaded) {\n        dispatch(ModalActionType.LoadLazyModal, {\n          id: entry.id\n        })\n\n        try {\n          const loader = entry.loader\n          loader?.().then((instance) => {\n            console.log(instance)\n\n            dispatch(ModalActionType.LazyModalLoaded, {\n              id: entry.id,\n              \n            })\n          })\n\n        } catch (err) {\n\n        }\n      }\n    }\n  }, [state])\n\n  return (\n    <>\n      {mountableCompnent}\n    </>\n  )\n}\n\n","import React, {\n  createContext,\n  useReducer,\n  useCallback,\n  useContext,\n  FC,\n  PropsWithChildren,\n} from 'react'\n\nimport {\n  reducer,\n  initialState\n} from './reducer'\nimport {\n  ModalStateMap,\n  Actions,\n  ActionsMap,\n  Dispatcher,\n  ModalProviderProps\n} from './types'\n\nimport { Mounter } from './mounter'\n\nconst ModalContext = createContext<{\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: ModalProviderProps\n}>({\n  state: initialState,\n  dispatch: () => undefined,\n  defaultProps: {},\n})\n\nModalContext.displayName = 'RMBH_Context'\n\nexport const ModalProvider: FC<PropsWithChildren<{\n  defaultProps: ModalProviderProps\n}>> = ({ children, defaultProps = {} }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  //  @ts-ignore\n  const dispatchAction: Dispatcher = useCallback((type, payload) => {\n    dispatch({ type, payload })\n  }, [])\n\n  const value = {\n    state,\n    defaultProps,\n    dispatch: dispatchAction,\n  }\n\n  return (\n    <ModalContext.Provider value={value}>\n      <>\n        <Mounter />\n        {children}\n      </>\n    </ModalContext.Provider>\n  )\n}\n\nexport const useModalContext = (): {\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: ModalProviderProps\n} => useContext(ModalContext)\n","import React, { useState } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\ninterface OpenModalInput<T> {\n  readonly modalId: string\n  readonly ignoreEvent?: boolean\n  readonly props?: T\n}\n\nexport const useOpenModal = <T>() => {\n  const [ loading, setLoading ] = useState<boolean>(false)\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const open = (modalId: string, props: T) => {\n    const modalItem = state.get(modalId)\n\n    throw new TypeError(`modalId(${modalId}) doesn't exist, cannot find corresponding 'modal' component, please check this`)\n    \n    if (modalItem?.isLazy && !modalItem?.loaded) {\n      \n    }\n  }\n  return open\n}","import { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\n\nexport const useCloseModal = () => {\n  const { dispatch } = useModalContext()\n\n  const close = (modalId: string) => dispatch(ModalActionType.CloseModal, { modalId })\n  const closeAll = () => dispatch(ModalActionType.CloseAllModals)\n\n  return {\n    close,\n    closeAll\n  }\n}","import React, { useMemo, useEffect, FC, useState, ReactElement, useCallback, createElement, useRef } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem, UpdateModalParams } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\nexport const useUpdateModal = () => {\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const update = () => {}\n  return update\n}","import React, { ComponentType, useEffect } from 'react'\n\nimport { useModalContext } from '../context'\nimport { Importer } from '../types'\nimport { ModalActionType } from '../constants'\n\ninterface ModalRegisterItem {\n  readonly isLazy?: boolean\n  readonly component?: ComponentType\n  readonly loader?: Importer\n}\n\ntype RegisterModalInput = Record<string, ModalRegisterItem>\n\nexport const useRegisterModal = () => {\n  const register = (modals: RegisterModalInput) => {\n    const { dispatch, state } = useModalContext()\n\n    useEffect(() => {\n      Object.keys(modals).forEach((modalId: string) => {\n        const registerItem = modals[modalId]\n\n        const modalItem: Record<string, any> = {\n          id: modalId,\n          isLazy: registerItem.isLazy,\n          component: registerItem.component,\n          loader: registerItem.loader\n        }\n\n        if (modalItem.isLazy) {\n          modalItem.loaded = false\n          modalItem.loading = false\n          modalItem.loadFailed = false\n        }\n\n        dispatch(ModalActionType.RegisterModal, modalItem)\n      })\n    }, [modals, state])\n  }\n\n  return register\n}\n","import { enableAllPlugins } from 'immer'\n\nenableAllPlugins()\n\nexport { ModalProvider } from './context'\n// export { withModals } from './register'\n\nexport { useOpenModal } from './hooks/useOpenModal'\nexport { useCloseModal } from './hooks/useCloseModal'\nexport { useUpdateModal } from './hooks/useUpdateModal'\nexport { useRegisterModal } from './hooks/useRegisterModal'\n\nexport { ModalBasicProps } from './types'\n"],"names":["ModalActionType","initialState","Map","reducer","produce","state","action","payload","payloadId","id","allKeys","Array","from","keys","registed","has","currentModal","get","type","RegisterModal","set","props","LoadLazyModal","loading","loadFailed","WrappedModalComponent","render","modalProps","opened","renderIfClosed","React","Mounter","useModalContext","dispatch","mountableCompnent","useMemo","entries","values","components","entry","component","push","createElement","key","useEffect","isLazy","loaded","loader","then","instance","console","log","LazyModalLoaded","err","ModalContext","createContext","undefined","defaultProps","displayName","ModalProvider","children","useReducer","dispatchAction","useCallback","value","Provider","useContext","useOpenModal","useState","open","modalId","modalItem","TypeError","useCloseModal","close","CloseModal","closeAll","CloseAllModals","useUpdateModal","update","useRegisterModal","register","modals","Object","forEach","registerItem","enableAllPlugins"],"mappings":"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"}