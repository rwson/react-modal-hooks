{"version":3,"file":"react-modal-better-hooks.esm.js","sources":["../../src/constants.ts","../../src/reducer.ts","../../src/components/WrappedModal.tsx","../../src/components/ModalAutoMounter.tsx","../../src/context.tsx","../../src/hooks/useOpenModal.ts","../../src/hooks/useCloseModal.ts","../../src/hooks/useUpdateModal.ts","../../src/hooks/useRegisterModal.ts","../../src/index.ts"],"sourcesContent":["export enum ModalActionType {\n  OpenModal = 'OpenModal',\n  UpdateModal = 'UpdateModal',\n  CloseModal = 'CloseModal',\n  CloseAllModals = 'CloseAllModals',\n\n  RemoveModal = 'RemoveModal',\n  RegisterModal = 'RegisterModal',\n  LazyModalLoaded = 'LazyModalLoaded',\n  LoadLazyModal = 'LoadLazyModal'\n}\n","import { ComponentType } from 'react'\nimport produce from 'immer'\n\nimport { ModalActionType } from './constants'\nimport { Importer, CloseModalParams, OpenModalParams, AddLazyModalParams, ActionsMap, Actions, ModalItem, ModalStateMap } from './types'\n\nexport const initialState = new Map()\n\nexport const reducer = produce(\n  (state: ModalStateMap, action: Actions): ModalStateMap => {\n    const { id: payloadId, props: payloadProps, loader, component, loadFailed, shouldComponentLoad, loaded, __mergeProps___ } = action.payload ?? {}\n    const allKeys: Array<string> = Array.from(state.keys())\n    const registed: boolean = state.has(payloadId)\n\n    let currentModal: ModalItem | undefined = state.get(payloadId)\n\n    switch (action.type) {\n      case ModalActionType.OpenModal:\n        if (currentModal) {\n          currentModal.visible = true\n          currentModal.props = Object.assign({}, payloadProps ?? {})\n\n          state.set(payloadId, currentModal as ModalItem)\n        }\n\n        return state\n\n      case ModalActionType.UpdateModal:\n        if (currentModal) {\n          let oldPorps = {}\n          if (__mergeProps___) {\n            oldPorps = currentModal.props ?? {}\n          }\n          currentModal.props = Object.assign({}, oldPorps, payloadProps ?? {})\n          state.set(payloadId, currentModal as ModalItem)\n        }\n      return state\n\n      case ModalActionType.CloseModal:\n        if (currentModal) {\n          currentModal.visible = false\n          state.set(payloadId, currentModal)\n\n          console.log(currentModal)\n        }\n        return state\n\n      case ModalActionType.CloseAllModals:\n        allKeys.forEach((key: string) => {\n          currentModal = state.get(key) as ModalItem\n          currentModal.visible = false\n          state.set(key, currentModal)\n        })\n        return state\n\n      case ModalActionType.RegisterModal:\n        if (!registed) {\n          state.set(payloadId, {\n            ...action.payload,\n            id: payloadId,\n            props: {}\n          } as ModalItem)\n        }\n        return state\n\n      case ModalActionType.LoadLazyModal:\n        if (currentModal) {\n          currentModal.loading = true\n          currentModal.loadFailed = false\n        }\n        return state\n\n      case ModalActionType.LazyModalLoaded:\n        if (currentModal) {\n          currentModal.loaded = loaded\n          currentModal.loadFailed = loadFailed\n          currentModal.loading = false\n          currentModal.component = component\n          state.set(payloadId, currentModal as ModalItem)\n        }\n        return state\n\n      default:\n        return state\n    }\n  }\n)\n","import React, { FC, ReactElement } from 'react'\n\ninterface WrappedModalProps {\n  render: any\n  visible: boolean\n  renderProps?: Record<string, any>\n}\n\nexport const WrappedModal: FC<WrappedModalProps> = ({\n  render,\n  visible,\n  renderProps\n}): ReactElement | null => {\n  if (!visible || !render) {\n    return null\n  }\n\n  const props = Object.assign({}, (renderProps ?? {}), { visible })\n  return <>{render(props)}</>\n}\n","import React, { FC, useEffect, useMemo, createElement, ReactElement } from 'react'\n\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { ModalActionType } from '../constants'\nimport { WrappedModal } from './WrappedModal'\n\nexport const ModalAutoMounter: FC = () => {\n  const { state, dispatch } = useModalContext()\n  const mountableCompnent = useMemo(() => {\n    const entries: IterableIterator<ModalItem> = state.values()\n    const components: ReactElement[] = []\n\n    for (const entry of entries) {\n      if (entry.component) {\n        components.push(createElement(WrappedModal, {\n          render: entry.component,\n          renderProps: entry.props,\n          visible: entry.visible,\n          key: entry.id\n        }))\n      }\n    }\n\n    return components\n  }, [state])\n\n  useEffect(() => {\n    const entries = state.values()\n\n    for (const entry of entries) {\n      if (entry.isLazy && !entry.loaded) {\n        dispatch(ModalActionType.LoadLazyModal, {\n          id: entry.id\n        })\n\n        try {\n          const loader = entry.loader\n          loader?.().then((instance) => {\n            dispatch(ModalActionType.LazyModalLoaded, {\n              id: entry.id,\n              component: instance.default,\n              loadFailed: false,\n              loaded: true\n            })\n          })\n\n        } catch (err) {\n\n        }\n      }\n    }\n  }, [state])\n\n  return (\n    <>\n      {mountableCompnent}\n    </>\n  )\n}\n\n","import React, {\n  createContext,\n  useReducer,\n  useCallback,\n  useContext,\n  FC,\n  PropsWithChildren,\n} from 'react'\n\nimport {\n  reducer,\n  initialState\n} from './reducer'\nimport {\n  ModalStateMap,\n  Actions,\n  ActionsMap,\n  Dispatcher,\n  ModalProviderProps\n} from './types'\n\nimport { ModalAutoMounter } from './components/ModalAutoMounter'\n\nconst ModalContext = createContext<{\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: ModalProviderProps\n}>({\n  state: initialState,\n  dispatch: () => undefined,\n  defaultProps: {},\n})\n\nModalContext.displayName = 'RMBH_Context'\n\nexport const ModalProvider: FC<PropsWithChildren<{\n  defaultProps: ModalProviderProps\n}>> = ({ children, defaultProps = {} }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  //  @ts-ignore\n  const dispatchAction: Dispatcher = useCallback((type, payload) => {\n    dispatch({ type, payload })\n  }, [])\n\n  const value = {\n    state,\n    defaultProps,\n    dispatch: dispatchAction,\n  }\n\n  return (\n    <ModalContext.Provider value={value}>\n      <>\n        <ModalAutoMounter />\n        {children}\n      </>\n    </ModalContext.Provider>\n  )\n}\n\nexport const useModalContext = (): {\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: ModalProviderProps\n} => useContext(ModalContext)\n","import React, { useState } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\ninterface OpenModalInput<T> {\n  readonly modalId: string\n  readonly props?: T\n}\n\ntype UseOpenModalReturn<T> = (params: OpenModalInput<T>) => void | undefined\n\nexport const useOpenModal = <T>(): UseOpenModalReturn<T> => {\n  const [ loading, setLoading ] = useState<boolean>(false)\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const open = ({ modalId, props }: OpenModalInput<T>): void | undefined => {\n    const modalItem = state.get(modalId)\n\n    if (modalItem?.isLazy && !modalItem?.loaded && !modalItem.loading) {\n      return\n    }\n\n    dispatch(ModalActionType.OpenModal, {\n      id: modalId,\n      props\n    })\n  }\n\n  return open\n}","import { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\n\ninterface UseCloseModalReutrn {\n  closeModal(modalId: string): void\n  closeAllModals(): void\n}\n\nexport const useCloseModal = (): UseCloseModalReutrn => {\n  const { dispatch } = useModalContext()\n\n  const closeModal = (modalId: string) => dispatch(ModalActionType.CloseModal, { modalId })\n  const closeAllModals = () => dispatch(ModalActionType.CloseAllModals)\n\n  return {\n    closeModal,\n    closeAllModals\n  }\n}","import React, { useCallback } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\n\ninterface UpdateModalInput<T> {\n  readonly modalId: string\n  readonly props?: T\n  readonly merge?: boolean\n}\n\ntype UseUpdateModalReturn<T> = (params: UpdateModalInput<T>) => void\n\nexport const useUpdateModal = <T>(): UseUpdateModalReturn<T> => {\n  const { state, dispatch } = useModalContext()\n\n  const update = useCallback(({ modalId, merge, props }: UpdateModalInput<T>): void => {\n    const modalItem = state.get(modalId)\n\n    dispatch(ModalActionType.UpdateModal, {\n      id: modalId,\n      props: (props as T)!,\n      __mergeProps___: merge\n    })\n  }, [state])\n\n  return update\n}","import React, { ComponentType, useEffect, useMemo } from 'react'\n\nimport { useModalContext } from '../context'\nimport { Importer } from '../types'\nimport { ModalActionType } from '../constants'\n\ninterface ModalRegisterItem {\n  readonly isLazy?: boolean\n  readonly component?: ComponentType\n  readonly loader?: Importer\n}\n\ntype RegisterModalInput = Record<string, ModalRegisterItem>\n\ntype UseRegisterModalReturn = (modals: RegisterModalInput) => void\n\nexport const useRegisterModal = (): UseRegisterModalReturn => {\n  const register = (modals: RegisterModalInput): void => {\n    const { dispatch, state } = useModalContext()\n\n    const diffModals = useMemo(() => {\n      return Object.keys(modals).reduce((result: RegisterModalInput, modalId: string) => {\n        if (state.get(modalId)) {\n          return result\n        }\n        \n        return {\n          ...result,\n          [modalId]: modals[modalId]\n        }\n      }, {})\n    }, [modals, state])\n\n    useEffect(() => {\n      Object.keys(diffModals).forEach((modalId: string) => {\n        const registerItem = diffModals[modalId]\n\n        const modalItem: Record<string, any> = {\n          id: modalId,\n          isLazy: registerItem.isLazy,\n          component: registerItem.component,\n          loader: registerItem.loader\n        }\n\n        if (modalItem.isLazy) {\n          modalItem.loaded = false\n          modalItem.loading = false\n          modalItem.loadFailed = false\n        }\n\n        dispatch(ModalActionType.RegisterModal, modalItem)\n      })\n    }, [diffModals])\n  }\n\n  return register\n}\n","import { enableAllPlugins } from 'immer'\n\nenableAllPlugins()\n\nexport { ModalProvider } from './context'\n// export { withModals } from './register'\n\nexport { useOpenModal } from './hooks/useOpenModal'\nexport { useCloseModal } from './hooks/useCloseModal'\nexport { useUpdateModal } from './hooks/useUpdateModal'\nexport { useRegisterModal } from './hooks/useRegisterModal'\n\nexport { ModalBasicProps } from './types'\n"],"names":["ModalActionType","initialState","Map","reducer","produce","state","action","payload","payloadId","id","payloadProps","props","loader","component","loadFailed","shouldComponentLoad","loaded","__mergeProps___","allKeys","Array","from","keys","registed","has","currentModal","get","type","OpenModal","visible","Object","assign","set","UpdateModal","oldPorps","CloseModal","console","log","CloseAllModals","forEach","key","RegisterModal","LoadLazyModal","loading","LazyModalLoaded","WrappedModal","render","renderProps","React","ModalAutoMounter","useModalContext","dispatch","mountableCompnent","useMemo","entries","values","components","entry","push","createElement","useEffect","isLazy","then","instance","err","ModalContext","createContext","undefined","defaultProps","displayName","ModalProvider","children","useReducer","dispatchAction","useCallback","value","Provider","useContext","useOpenModal","useState","open","modalId","modalItem","useCloseModal","closeModal","closeAllModals","useUpdateModal","update","merge","useRegisterModal","register","modals","diffModals","reduce","result","registerItem","enableAllPlugins"],"mappings":"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"}