{"version":3,"file":"react-modal-better-hooks.cjs.production.min.js","sources":["../../src/constants.ts","../../src/reducer.ts","../../src/mounter.tsx","../../src/context.tsx","../../src/index.ts","../../src/hooks/useCloseModal.ts","../../src/hooks/useOpenModal.ts","../../src/hooks/useRegisterModal.ts","../../src/hooks/useUpdateModal.ts"],"sourcesContent":["export enum ModalActionType {\n  OpenModal = 'OpenModal',\n  UpdateModal = 'UpdateModal',\n  CloseModal = 'CloseModal',\n  CloseAllModals = 'CloseAllModals',\n\n  RemoveModal = 'RemoveModal',\n  RegisterModal = 'RegisterModal',\n  LazyModalLoaded = 'LazyModalLoaded',\n  LoadLazyModal = 'LoadLazyModal'\n}\n","import { ComponentType } from 'react'\nimport produce from 'immer'\n\nimport { ModalActionType } from './constants'\nimport { Importer, CloseModalParams, OpenModalParams, AddLazyModalParams, ActionsMap, Actions, ModalItem, ModalStateMap } from './types'\n\nexport const initialState = new Map()\n\nexport const reducer = produce(\n  (state: ModalStateMap, action: Actions): ModalStateMap => {\n    const { id: payloadId, props: payloadProps, loader, component, loadFailed, shouldComponentLoad, loaded } = action.payload ?? {}\n    const allKeys: Array<string> = Array.from(state.keys())\n    const registed: boolean = state.has(payloadId)\n\n    let currentModal: ModalItem | undefined = state.get(payloadId)\n\n    switch (action.type) {\n      // case ModalActionType.OpenModal:\n      //   if (registed) {\n      //     if (currentModal) {\n      //       currentModal.opened = true\n      //       currentModal.props = payloadProps\n      //     }\n      //   } else {\n      //     currentModal = Object.assign({}, action.payload, {\n      //       opened: true,\n      //     })\n      //   }\n\n      //   state.set(payloadId, currentModal as ModalItem)\n      //   return state\n\n      // case ModalActionType.UpdateModal:\n      //   if (currentModal) {\n      //     currentModal.opened = true\n      //     currentModal.props = payloadProps\n      //     state.set(payloadId, currentModal as ModalItem)\n      //   }\n      // return state\n\n\n      // case ModalActionType.CloseModal:\n      //   if (currentModal) {\n      //     currentModal.opened = false\n      //     state.set(payloadId, currentModal)\n      //   }\n      //   return state\n\n      // case ModalActionType.CloseAllModals:\n      //   allKeys.forEach((key: string) => {\n      //     currentModal = state.get(key) as ModalItem\n      //     currentModal.opened = false\n      //     state.set(key, currentModal)\n      //   })\n      //   return state\n\n      case ModalActionType.RegisterModal:\n        if (!registed) {\n          state.set(payloadId, {\n            ...action.payload,\n            id: payloadId,\n            props: {}\n          } as ModalItem)\n        }\n        return state\n\n      case ModalActionType.LoadLazyModal:\n        if (currentModal) {\n          currentModal.loading = true\n          currentModal.loadFailed = false\n        }\n        return state\n\n      // case ModalActionType.LazyModalLoaded:\n      //   if (currentModal) {\n      //     currentModal.loaded = loaded\n      //     currentModal.loadFailed = loadFailed\n      //     currentModal.loading = false\n      //     currentModal.component = component\n      //     state.set(payloadId, currentModal as ModalItem)\n      //   }\n      //   return state\n\n      default:\n        return state\n    }\n  }\n)\n","import React, { FC, useEffect, useMemo, createElement, ReactElement } from 'react'\n\nimport { useModalContext } from './context'\nimport { ModalItem } from './types'\nimport { ModalActionType } from './constants'\n\nexport const WrappedModalComponent: FC<any> = ({\n  render,\n  modalProps,\n  opened,\n  renderIfClosed\n}): ReactElement | null => {\n  if ((!opened && !renderIfClosed) || !render) {\n    return null\n  }\n\n  return <>{render(modalProps)}</>\n}\n\n\nexport const Mounter: FC = () => {\n  const { state, dispatch } = useModalContext()\n  const mountableCompnent = useMemo(() => {\n    const entries: IterableIterator<ModalItem> = state.values()\n    const components: ReactElement[] = []\n\n    for (const entry of entries) {\n      if (entry.component) {\n        components.push(createElement(WrappedModalComponent, {\n          render: entry.component,\n          modalProps: {},\n          renderIfClosed: false,\n          opened: false,\n          key: entry.id\n        }))\n      }\n    }\n\n    return components\n  }, [state])\n\n  useEffect(() => {\n    const entries = state.values()\n\n    for (const entry of entries) {\n      if (entry.isLazy && !entry.loaded) {\n        dispatch(ModalActionType.LoadLazyModal, {\n          id: entry.id\n        })\n\n        try {\n          const loader = entry.loader\n          loader?.().then((instance) => {\n            console.log(instance)\n\n            dispatch(ModalActionType.LazyModalLoaded, {\n              id: entry.id,\n              \n            })\n          })\n\n        } catch (err) {\n\n        }\n      }\n    }\n  }, [state])\n\n  return (\n    <>\n      {mountableCompnent}\n    </>\n  )\n}\n\n","import React, {\n  createContext,\n  useReducer,\n  useCallback,\n  useContext,\n  FC,\n  PropsWithChildren,\n} from 'react'\n\nimport {\n  reducer,\n  initialState\n} from './reducer'\nimport {\n  ModalStateMap,\n  Actions,\n  ActionsMap,\n  Dispatcher,\n  ModalProviderProps\n} from './types'\n\nimport { Mounter } from './mounter'\n\nconst ModalContext = createContext<{\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: ModalProviderProps\n}>({\n  state: initialState,\n  dispatch: () => undefined,\n  defaultProps: {},\n})\n\nModalContext.displayName = 'RMBH_Context'\n\nexport const ModalProvider: FC<PropsWithChildren<{\n  defaultProps: ModalProviderProps\n}>> = ({ children, defaultProps = {} }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  //  @ts-ignore\n  const dispatchAction: Dispatcher = useCallback((type, payload) => {\n    dispatch({ type, payload })\n  }, [])\n\n  const value = {\n    state,\n    defaultProps,\n    dispatch: dispatchAction,\n  }\n\n  return (\n    <ModalContext.Provider value={value}>\n      <>\n        <Mounter />\n        {children}\n      </>\n    </ModalContext.Provider>\n  )\n}\n\nexport const useModalContext = (): {\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: ModalProviderProps\n} => useContext(ModalContext)\n","import { enableAllPlugins } from 'immer'\n\nenableAllPlugins()\n\nexport { ModalProvider } from './context'\n// export { withModals } from './register'\n\nexport { useOpenModal } from './hooks/useOpenModal'\nexport { useCloseModal } from './hooks/useCloseModal'\nexport { useUpdateModal } from './hooks/useUpdateModal'\nexport { useRegisterModal } from './hooks/useRegisterModal'\n\nexport { ModalBasicProps } from './types'\n","import { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\n\nexport const useCloseModal = () => {\n  const { dispatch } = useModalContext()\n\n  const close = (modalId: string) => dispatch(ModalActionType.CloseModal, { modalId })\n  const closeAll = () => dispatch(ModalActionType.CloseAllModals)\n\n  return {\n    close,\n    closeAll\n  }\n}","import React, { useState } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\ninterface OpenModalInput<T> {\n  readonly modalId: string\n  readonly ignoreEvent?: boolean\n  readonly props?: T\n}\n\nexport const useOpenModal = <T>() => {\n  const [ loading, setLoading ] = useState<boolean>(false)\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const open = (modalId: string, props: T) => {\n    const modalItem = state.get(modalId)\n\n    throw new TypeError(`modalId(${modalId}) doesn't exist, cannot find corresponding 'modal' component, please check this`)\n    \n    if (modalItem?.isLazy && !modalItem?.loaded) {\n      \n    }\n  }\n  return open\n}","import React, { ComponentType, useEffect } from 'react'\n\nimport { useModalContext } from '../context'\nimport { Importer } from '../types'\nimport { ModalActionType } from '../constants'\n\ninterface ModalRegisterItem {\n  readonly isLazy?: boolean\n  readonly component?: ComponentType\n  readonly loader?: Importer\n}\n\ntype RegisterModalInput = Record<string, ModalRegisterItem>\n\nexport const useRegisterModal = () => {\n  const register = (modals: RegisterModalInput) => {\n    const { dispatch, state } = useModalContext()\n\n    useEffect(() => {\n      Object.keys(modals).forEach((modalId: string) => {\n        const registerItem = modals[modalId]\n\n        const modalItem: Record<string, any> = {\n          id: modalId,\n          isLazy: registerItem.isLazy,\n          component: registerItem.component,\n          loader: registerItem.loader\n        }\n\n        if (modalItem.isLazy) {\n          modalItem.loaded = false\n          modalItem.loading = false\n          modalItem.loadFailed = false\n        }\n\n        dispatch(ModalActionType.RegisterModal, modalItem)\n      })\n    }, [modals, state])\n  }\n\n  return register\n}\n","import React, { useMemo, useEffect, FC, useState, ReactElement, useCallback, createElement, useRef } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem, UpdateModalParams } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\nexport const useUpdateModal = () => {\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const update = () => {}\n  return update\n}"],"names":["ModalActionType","initialState","Map","reducer","produce","state","action","payloadId","payload","id","registed","Array","from","keys","has","currentModal","get","type","RegisterModal","set","props","LoadLazyModal","loading","loadFailed","WrappedModalComponent","render","opened","renderIfClosed","React","modalProps","Mounter","useModalContext","dispatch","mountableCompnent","useMemo","components","values","entry","component","push","createElement","key","useEffect","isLazy","loaded","loader","then","instance","console","log","LazyModalLoaded","err","ModalContext","createContext","defaultProps","displayName","useContext","enableAllPlugins","children","useReducer","dispatchAction","useCallback","Provider","value","close","modalId","CloseModal","closeAll","CloseAllModals","useState","TypeError","modals","Object","forEach","registerItem","modalItem"],"mappings":"8IAAYA,skCAAZ,SAAYA,GACVA,wBACAA,4BACAA,0BACAA,kCAEAA,4BACAA,gCACAA,oCACAA,gCATF,CAAYA,IAAAA,OCML,IAAMC,EAAe,IAAIC,IAEnBC,EAAUC,GACrB,SAACC,EAAsBC,SACTC,YAA+FD,EAAOE,WAAW,IAArHC,GAEFC,GADyBC,MAAMC,KAAKP,EAAMQ,QACtBR,EAAMS,IAAIP,IAEhCQ,EAAsCV,EAAMW,IAAIT,UAE5CD,EAAOW,WAwCRjB,EAAgBkB,qBACdR,GACHL,EAAMc,IAAIZ,OACLD,EAAOE,SACVC,GAAIF,EACJa,MAAO,MAGJf,OAEJL,EAAgBqB,qBACfN,IACFA,EAAaO,SAAU,EACvBP,EAAaQ,YAAa,GAErBlB,iBAaAA,MC9EFmB,EAAiC,gBAC5CC,IAAAA,gBAEAC,UACAC,iBAEqCF,EAI9BG,gCAAGH,IARVI,aAKS,MAOEC,EAAc,iBACGC,IAApB1B,IAAAA,MAAO2B,IAAAA,SACTC,EAAoBC,WAAQ,qBAE1BC,EAA6B,OADU9B,EAAM+B,yBAGtB,KAAlBC,UACLA,EAAMC,WACRH,EAAWI,KAAKC,gBAAchB,EAAuB,CACnDC,OAAQY,EAAMC,UACdT,WAAY,GACZF,gBAAgB,EAChBD,QAAQ,EACRe,IAAKJ,EAAM5B,aAKV0B,IACN,CAAC9B,WAEJqC,aAAU,sCAGGL,aACLA,EAAMM,SAAWN,EAAMO,OAAQ,CACjCZ,EAAShC,EAAgBqB,cAAe,CACtCZ,GAAI4B,EAAM5B,aAIJoC,EAASR,EAAMQ,aACrBA,GAAAA,IAAWC,MAAK,SAACC,GACfC,QAAQC,IAAIF,GAEZf,EAAShC,EAAgBkD,gBAAiB,CACxCzC,GAAI4B,EAAM5B,QAKd,MAAO0C,WAnBG9C,EAAM+B,+BAwBrB,CAAC/B,IAGFuB,gCACGK,IC/CDmB,EAAeC,gBAIlB,CACDhD,MAAOJ,EACP+B,SAAU,aACVsB,aAAc,KAGhBF,EAAaG,YAAc,mBA4BdxB,EAAkB,kBAI1ByB,aAAWJ,IC/DhBK,2CDmCM,gBAAGC,IAAAA,aAAUJ,aAAAA,aAAe,OACNK,aAAWxD,EAASF,GAAvCI,OAAO2B,OAGR4B,EAA6BC,eAAY,SAAC5C,EAAMT,GACpDwB,EAAS,CAAEf,KAAAA,EAAMT,QAAAA,MAChB,WASDoB,gBAACwB,EAAaU,UAASC,MAPX,CACZ1D,MAAAA,EACAiD,aAAAA,EACAtB,SAAU4B,IAKRhC,gCACEA,gBAACE,QACA4B,2BEpDoB,eACnB1B,EAAaD,IAAbC,eAKD,CACLgC,MAJY,SAACC,UAAoBjC,EAAShC,EAAgBkE,WAAY,CAAED,QAAAA,KAKxEE,SAJe,kBAAMnC,EAAShC,EAAgBoE,wCCMtB,WACMC,YAAkB,OAC1ChE,EAAkC0B,IAAlC1B,aAEK,SAAC4D,EAAiB7C,SACXf,EAAMW,IAAIiD,GAEtB,IAAIK,qBAAqBL,gHCNH,kBACb,SAACM,SACYxC,IAApBC,IAAAA,SAERU,aAAU,WACR8B,OAAO3D,KAAK0D,GAAQE,SAAQ,SAACR,OACrBS,EAAeH,EAAON,GAEtBU,EAAiC,CACrClE,GAAIwD,EACJtB,OAAQ+B,EAAa/B,OACrBL,UAAWoC,EAAapC,UACxBO,OAAQ6B,EAAa7B,QAGnB8B,EAAUhC,SACZgC,EAAU/B,QAAS,EACnB+B,EAAUrD,SAAU,EACpBqD,EAAUpD,YAAa,GAGzBS,EAAShC,EAAgBkB,cAAeyD,QAEzC,CAACJ,IArBclE,iCCTQ,kBACc0B,IAE3B"}