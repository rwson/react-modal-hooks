{"version":3,"file":"react-modal-better-hooks.cjs.production.min.js","sources":["../../src/constants.ts","../../src/reducer.ts","../../src/components/WrappedModal.tsx","../../src/components/ModalAutoMounter.tsx","../../src/context.tsx","../../src/index.ts","../../src/hooks/useCloseModal.ts","../../src/hooks/useModalIsLoading.ts","../../src/hooks/useOpenModal.ts","../../src/hooks/useRegisterModal.ts","../../src/hooks/useUpdateModal.ts"],"sourcesContent":["export enum ModalActionType {\n  OpenModal = 'OpenModal',\n  UpdateModal = 'UpdateModal',\n  CloseModal = 'CloseModal',\n  CloseAllModals = 'CloseAllModals',\n  RemoveModal = 'RemoveModal',\n  RegisterModal = 'RegisterModal',\n  LazyModalLoaded = 'LazyModalLoaded',\n  LoadLazyModal = 'LoadLazyModal'\n}\n","import { ComponentType } from 'react'\nimport produce from 'immer'\n\nimport { ModalActionType } from './constants'\nimport { Importer, ActionsMap, Actions, ModalItem, ModalStateMap } from './types'\n\nexport const initialState = new Map()\n\nexport const reducer = produce(\n  (state: ModalStateMap, action: Actions): ModalStateMap => {\n    const { id: payloadId, props: payloadProps, loader, component, loadFailed, shouldComponentLoad, loaded, __mergeProps___ } = action.payload ?? {}\n    const allKeys: Array<string> = Array.from(state.keys())\n    const registed: boolean = state.has(payloadId)\n\n    let currentModal: ModalItem | undefined = state.get(payloadId)\n\n    switch (action.type) {\n      case ModalActionType.OpenModal:\n        if (currentModal) {\n          currentModal.visible = true\n          currentModal.props = Object.assign({}, payloadProps ?? {})\n\n          state.set(payloadId, currentModal as ModalItem)\n        }\n\n        return state\n\n      case ModalActionType.UpdateModal:\n        if (currentModal) {\n          let oldPorps = {}\n          if (__mergeProps___) {\n            oldPorps = currentModal.props ?? {}\n          }\n          currentModal.props = Object.assign({}, oldPorps, payloadProps ?? {})\n          state.set(payloadId, currentModal as ModalItem)\n        }\n      return state\n\n      case ModalActionType.CloseModal:\n        console.log(action.type, currentModal)\n\n        if (currentModal) {\n          currentModal.visible = false\n          state.set(payloadId, currentModal)\n        }\n        return state\n\n      case ModalActionType.CloseAllModals:\n        allKeys.forEach((key: string) => {\n          currentModal = state.get(key) as ModalItem\n          currentModal.visible = false\n          state.set(key, currentModal)\n        })\n        return state\n\n      case ModalActionType.RegisterModal:\n        if (!registed) {\n          state.set(payloadId, {\n            ...action.payload,\n            id: payloadId,\n            props: {}\n          } as ModalItem)\n        }\n        return state\n\n      case ModalActionType.RemoveModal:\n        state.delete(payloadId)\n        return state\n\n      case ModalActionType.LoadLazyModal:\n        if (currentModal) {\n          currentModal.loading = true\n          currentModal.loadFailed = false\n        }\n        return state\n\n      case ModalActionType.LazyModalLoaded:\n        if (currentModal) {\n          currentModal.loaded = loaded\n          currentModal.loadFailed = loadFailed\n          currentModal.loading = false\n          currentModal.component = component\n          state.set(payloadId, currentModal as ModalItem)\n        }\n        return state\n\n      default:\n        return state\n    }\n  }\n)\n","import React, { FC, ReactElement } from 'react'\n\ninterface WrappedModalProps {\n  render: any\n  visible: boolean\n  renderProps?: Record<string, any>\n}\n\nexport const WrappedModal: FC<WrappedModalProps> = ({\n  render,\n  visible,\n  renderProps\n}): ReactElement | null => {\n  if (!visible || !render) {\n    return null\n  }\n\n  const props = Object.assign({}, (renderProps ?? {}), { visible })\n  return <>{render(props)}</>\n}\n","import React, { FC, useEffect, useMemo, createElement, ReactElement } from 'react'\n\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { ModalActionType } from '../constants'\nimport { WrappedModal } from './WrappedModal'\n\nexport const ModalAutoMounter: FC = () => {\n  const { state, dispatch, defaultProps } = useModalContext()\n  const mountableCompnent = useMemo(() => {\n    const entries: IterableIterator<ModalItem> = state.values()\n    const components: ReactElement[] = []\n\n    for (const entry of entries) {\n      if (entry.component) {\n        components.push(createElement(WrappedModal, {\n          ...(defaultProps || {}),\n          render: entry.component,\n          renderProps: entry.props,\n          visible: entry.visible,\n          key: entry.id\n        }))\n      }\n    }\n\n    return components\n  }, [state])\n\n  useEffect(() => {\n    const entries = state.values()\n\n    for (const entry of entries) {\n      if (entry.isLazy && !entry.loaded) {\n        dispatch(ModalActionType.LoadLazyModal, {\n          id: entry.id\n        })\n\n        const loader = entry.loader\n        loader?.().then((instance) => {\n          dispatch(ModalActionType.LazyModalLoaded, {\n            id: entry.id,\n            component: instance.default,\n            loadFailed: false,\n            loaded: true\n          })\n        })\n      }\n    }\n  }, [state])\n\n  return (\n    <>\n      {mountableCompnent}\n    </>\n  )\n}\n\n","import React, {\n  createContext,\n  useReducer,\n  useCallback,\n  useContext,\n  FC,\n  PropsWithChildren,\n} from 'react'\n\nimport {\n  reducer,\n  initialState\n} from './reducer'\nimport {\n  ModalStateMap,\n  Actions,\n  ActionsMap,\n  Dispatcher\n} from './types'\n\nimport { ModalAutoMounter } from './components/ModalAutoMounter'\n\nconst ModalContext = createContext<{\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: Record<string, any>\n}>({\n  state: initialState,\n  dispatch: () => undefined,\n  defaultProps: {},\n})\n\nModalContext.displayName = 'RMBH_Context'\n\nexport const ModalProvider: FC<PropsWithChildren<any>> = ({ children, defaultProps = {} }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  //  @ts-ignore\n  const dispatchAction: Dispatcher = useCallback((type, payload) => {\n    dispatch({ type, payload })\n  }, [])\n\n  const value = {\n    state,\n    defaultProps,\n    dispatch: dispatchAction,\n  }\n\n  return (\n    <ModalContext.Provider value={value}>\n      <>\n        <ModalAutoMounter />\n        {children}\n      </>\n    </ModalContext.Provider>\n  )\n}\n\nexport const useModalContext = (): {\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: Record<string, any>\n} => useContext(ModalContext)\n","import { enableAllPlugins } from 'immer'\n\nenableAllPlugins()\n\nexport { ModalProvider } from './context'\n\nexport { useOpenModal } from './hooks/useOpenModal'\nexport { useCloseModal } from './hooks/useCloseModal'\nexport { useUpdateModal } from './hooks/useUpdateModal'\nexport { useModalIsLoading } from './hooks/useModalIsLoading'\nexport { useRegisterModal } from './hooks/useRegisterModal'\n\nexport { ModalBasicProps } from './types'\n","import { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\n\ninterface UseCloseModalReutrn {\n  closeModal(id: string): void\n  closeAllModals(): void\n}\n\nexport const useCloseModal = (): UseCloseModalReutrn => {\n  const { dispatch } = useModalContext()\n\n  const closeModal = (id: string) => dispatch(ModalActionType.CloseModal, { id })\n  const closeAllModals = () => dispatch(ModalActionType.CloseAllModals)\n\n  return {\n    closeModal,\n    closeAllModals\n  }\n}","import { useMemo, useState } from 'react'\n\nimport { useModalContext } from '../context'\n\nexport const useModalIsLoading = (modalIds: string | string[]): boolean => {\n  const { state } = useModalContext()\n  return useMemo<boolean>(() => {\n    const ids: string[] = Array.isArray(modalIds) ? modalIds : [modalIds]\n    const modals = ids.map((id: string) => state.get(id)).filter(Boolean)\n\n    if (!modals.length) {\n      return false\n    }\n\n    return modals.some((modal) => modal?.isLazy ? modal.loading : false)\n  }, [state, modalIds])\n}","import React, { useState } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\ninterface OpenModalInput<T> {\n  readonly modalId: string\n  readonly props?: T\n}\n\ntype UseOpenModalReturn<T> = (params: OpenModalInput<T>) => void | undefined\n\nexport const useOpenModal = <T>(): UseOpenModalReturn<T> => {\n  const [ loading, setLoading ] = useState<boolean>(false)\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const open = ({ modalId, props }: OpenModalInput<T>): void | undefined => {\n    const modalItem = state.get(modalId)\n\n    if (modalItem?.isLazy && !modalItem?.loaded && !modalItem.loading) {\n      const loader = modalItem.loader\n      dispatch(ModalActionType.LoadLazyModal, {\n        id: modalId\n      })\n\n      loader?.().then((instance) => {\n        dispatch(ModalActionType.LazyModalLoaded, {\n          id: modalItem.id,\n          component: instance.default,\n          loadFailed: false,\n          loaded: true\n        })\n\n        setTimeout(() => {\n          dispatch(ModalActionType.OpenModal, {\n            id: modalId,\n            props\n          })\n        }, 30)\n      })\n      return\n    }\n\n    dispatch(ModalActionType.OpenModal, {\n      id: modalId,\n      props\n    })\n  }\n\n  return open\n}","import React, { ComponentType, useEffect, useMemo, useRef } from 'react'\n\nimport { useModalContext } from '../context'\nimport { Importer } from '../types'\nimport { ModalActionType } from '../constants'\n\ninterface ModalRegisterItem {\n  readonly isLazy?: boolean\n  readonly component?: ComponentType\n  readonly loader?: Importer\n}\n\ntype RegisterModalInput = Record<string, ModalRegisterItem>\n\ntype UseRegisterModalReturn = (modals: RegisterModalInput, isGlobal?: boolean) => void\n\nexport const useRegisterModal = (): UseRegisterModalReturn => {\n  const register = (modals: RegisterModalInput, isGlobal?: boolean): void => {\n    const { dispatch, state } = useModalContext()\n    const mountRef = useRef<boolean>(false)\n\n    const diffModals = useMemo(() => {\n      return Object.keys(modals).reduce((result: RegisterModalInput, modalId: string) => {\n        if (state.get(modalId)) {\n          return result\n        }\n        \n        return {\n          ...result,\n          [modalId]: modals[modalId]\n        }\n      }, {})\n    }, [modals, state])\n\n    useEffect(() => {\n      Object.keys(diffModals).forEach((modalId: string) => {\n        const registerItem = diffModals[modalId]\n\n        const modalItem: Record<string, any> = {\n          id: modalId,\n          isLazy: registerItem.isLazy,\n          component: registerItem.component,\n          loader: registerItem.loader\n        }\n\n        if (modalItem.isLazy) {\n          modalItem.loaded = false\n          modalItem.loading = false\n          modalItem.loadFailed = false\n        }\n\n        dispatch(ModalActionType.RegisterModal, modalItem)\n      })\n    }, [diffModals])\n\n    useEffect(() => {\n      if (!mountRef.current) {\n        mountRef.current = true\n      }\n\n      return () => {\n        if (!isGlobal && mountRef.current) {\n          Object.keys(modals).forEach((id) => {\n            dispatch(ModalActionType.RemoveModal, { id })\n          })\n        }\n      }\n    }, [modals, isGlobal])\n  }\n\n  return register\n}\n","import React, { useCallback } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\n\ninterface UpdateModalInput<T> {\n  readonly modalId: string\n  readonly props?: T\n  readonly merge?: boolean\n}\n\ntype UseUpdateModalReturn<T> = (params: UpdateModalInput<T>) => void\n\nexport const useUpdateModal = <T>(): UseUpdateModalReturn<T> => {\n  const { state, dispatch } = useModalContext()\n\n  const update = useCallback(({ modalId, merge, props }: UpdateModalInput<T>): void => {\n    const modalItem = state.get(modalId)\n\n    dispatch(ModalActionType.UpdateModal, {\n      id: modalId,\n      props: (props as T)!,\n      __mergeProps___: merge\n    })\n  }, [state])\n\n  return update\n}"],"names":["ModalActionType","initialState","Map","reducer","produce","state","action","payload","payloadId","id","payloadProps","props","loader","component","loadFailed","shouldComponentLoad","loaded","__mergeProps___","allKeys","Array","from","keys","registed","has","currentModal","get","type","OpenModal","visible","Object","assign","set","UpdateModal","oldPorps","CloseModal","console","log","CloseAllModals","forEach","key","RegisterModal","RemoveModal","LoadLazyModal","loading","LazyModalLoaded","WrappedModal","render","renderProps","React","ModalAutoMounter","useModalContext","dispatch","defaultProps","mountableCompnent","useMemo","components","values","entry","push","createElement","useEffect","isLazy","then","instance","ModalContext","createContext","displayName","useContext","enableAllPlugins","children","useReducer","dispatchAction","useCallback","Provider","value","closeModal","closeAllModals","modalIds","modals","isArray","map","filter","Boolean","length","some","modal","useState","modalId","modalItem","setTimeout","isGlobal","mountRef","useRef","diffModals","reduce","result","registerItem","current","merge"],"mappings":"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"}