{"version":3,"file":"react-modal-better-hooks.cjs.production.min.js","sources":["../../src/constants.ts","../../src/reducer.ts","../../src/components/WrappedModal.tsx","../../src/components/ModalAutoMounter.tsx","../../src/context.tsx","../../src/index.ts","../../src/hooks/useCloseModal.ts","../../src/hooks/useModalIsLoading.ts","../../src/hooks/useOpenModal.ts","../../src/hooks/useRegisterModal.ts","../../src/hooks/useUpdateModal.ts"],"sourcesContent":["export enum ModalActionType {\n  OpenModal = 'OpenModal',\n  UpdateModal = 'UpdateModal',\n  CloseModal = 'CloseModal',\n  CloseAllModals = 'CloseAllModals',\n  RemoveModal = 'RemoveModal',\n  RegisterModal = 'RegisterModal',\n  LazyModalLoaded = 'LazyModalLoaded',\n  LoadLazyModal = 'LoadLazyModal'\n}\n","import { ComponentType } from 'react'\nimport produce from 'immer'\n\nimport { ModalActionType } from './constants'\nimport { Importer, ActionsMap, Actions, ModalItem, ModalStateMap } from './types'\n\nexport const initialState = new Map()\n\nexport const reducer = produce(\n  (state: ModalStateMap, action: Actions): ModalStateMap => {\n    const { id: payloadId, props: payloadProps, loader, component, loadFailed, shouldComponentLoad, loaded, __mergeProps___ } = action.payload ?? {}\n    const allKeys: Array<string> = Array.from(state.keys())\n    const registed: boolean = state.has(payloadId)\n\n    let currentModal: ModalItem | undefined = state.get(payloadId)\n\n    switch (action.type) {\n      case ModalActionType.OpenModal:\n        if (currentModal) {\n          currentModal.visible = true\n          currentModal.props = Object.assign({}, payloadProps ?? {})\n\n          state.set(payloadId, currentModal as ModalItem)\n        }\n\n        return state\n\n      case ModalActionType.UpdateModal:\n        if (currentModal) {\n          let oldPorps = {}\n          if (__mergeProps___) {\n            oldPorps = currentModal.props ?? {}\n          }\n          currentModal.props = Object.assign({}, oldPorps, payloadProps ?? {})\n          state.set(payloadId, currentModal as ModalItem)\n        }\n      return state\n\n      case ModalActionType.CloseModal:\n        if (currentModal) {\n          currentModal.visible = false\n          state.set(payloadId, currentModal)\n        }\n        return state\n\n      case ModalActionType.CloseAllModals:\n        allKeys.forEach((key: string) => {\n          currentModal = state.get(key) as ModalItem\n          currentModal.visible = false\n          state.set(key, currentModal)\n        })\n        return state\n\n      case ModalActionType.RegisterModal:\n        if (!registed) {\n          state.set(payloadId, {\n            ...action.payload,\n            id: payloadId,\n            props: {}\n          } as ModalItem)\n        }\n        return state\n\n      case ModalActionType.RemoveModal:\n        state.delete(payloadId)\n        return state\n\n      case ModalActionType.LoadLazyModal:\n        if (currentModal) {\n          currentModal.loading = true\n          currentModal.loadFailed = false\n        }\n        return state\n\n      case ModalActionType.LazyModalLoaded:\n        if (currentModal) {\n          currentModal.loaded = loaded\n          currentModal.loadFailed = loadFailed\n          currentModal.loading = false\n          currentModal.component = component\n          state.set(payloadId, currentModal as ModalItem)\n        }\n        return state\n\n      default:\n        return state\n    }\n  }\n)\n","import React, { FC, ReactElement } from 'react'\n\ninterface WrappedModalProps {\n  render: any\n  visible: boolean\n  renderProps?: Record<string, any>\n}\n\nexport const WrappedModal: FC<WrappedModalProps> = ({\n  render,\n  visible,\n  renderProps\n}): ReactElement | null => {\n  if (!visible || !render) {\n    return null\n  }\n\n  const props = Object.assign({}, (renderProps ?? {}), { visible })\n  return <>{render(props)}</>\n}\n","import React, { FC, useEffect, useMemo, createElement, ReactElement } from 'react'\n\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { ModalActionType } from '../constants'\nimport { WrappedModal } from './WrappedModal'\n\nexport const ModalAutoMounter: FC = () => {\n  const { state, dispatch, defaultProps } = useModalContext()\n  const mountableCompnent = useMemo(() => {\n    const entries: IterableIterator<ModalItem> = state.values()\n    const components: ReactElement[] = []\n\n    for (const entry of entries) {\n      if (entry.component) {\n        components.push(createElement(WrappedModal, {\n          ...(defaultProps || {}),\n          render: entry.component,\n          renderProps: entry.props,\n          visible: entry.visible,\n          key: entry.id\n        }))\n      }\n    }\n\n    return components\n  }, [state])\n\n  useEffect(() => {\n    const entries = state.values()\n\n    for (const entry of entries) {\n      if (entry.isLazy && !entry.loaded) {\n        dispatch(ModalActionType.LoadLazyModal, {\n          id: entry.id\n        })\n\n        const loader = entry.loader\n        loader?.().then((instance) => {\n          dispatch(ModalActionType.LazyModalLoaded, {\n            id: entry.id,\n            component: instance.default,\n            loadFailed: false,\n            loaded: true\n          })\n        })\n      }\n    }\n  }, [state])\n\n  return (\n    <>\n      {mountableCompnent}\n    </>\n  )\n}\n\n","import React, {\n  createContext,\n  useReducer,\n  useCallback,\n  useContext,\n  FC,\n  PropsWithChildren,\n} from 'react'\n\nimport {\n  reducer,\n  initialState\n} from './reducer'\nimport {\n  ModalStateMap,\n  Actions,\n  ActionsMap,\n  Dispatcher\n} from './types'\n\nimport { ModalAutoMounter } from './components/ModalAutoMounter'\n\nconst ModalContext = createContext<{\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: Record<string, any>\n}>({\n  state: initialState,\n  dispatch: () => undefined,\n  defaultProps: {},\n})\n\nModalContext.displayName = 'RMBH_Context'\n\nexport const ModalProvider: FC<PropsWithChildren<any>> = ({ children, defaultProps = {} }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  //  @ts-ignore\n  const dispatchAction: Dispatcher = useCallback((type, payload) => {\n    dispatch({ type, payload })\n  }, [])\n\n  const value = {\n    state,\n    defaultProps,\n    dispatch: dispatchAction,\n  }\n\n  return (\n    <ModalContext.Provider value={value}>\n      <>\n        <ModalAutoMounter />\n        {children}\n      </>\n    </ModalContext.Provider>\n  )\n}\n\nexport const useModalContext = (): {\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: Record<string, any>\n} => useContext(ModalContext)\n","import { enableAllPlugins } from 'immer'\n\nenableAllPlugins()\n\nexport { ModalProvider } from './context'\n\nexport { useOpenModal } from './hooks/useOpenModal'\nexport { useCloseModal } from './hooks/useCloseModal'\nexport { useUpdateModal } from './hooks/useUpdateModal'\nexport { useModalIsLoading } from './hooks/useModalIsLoading'\nexport { useRegisterModal } from './hooks/useRegisterModal'\n\nexport { ModalBasicProps } from './types'\n","import { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\n\ninterface UseCloseModalReutrn {\n  closeModal(id: string): void\n  closeAllModals(): void\n}\n\nexport const useCloseModal = (): UseCloseModalReutrn => {\n  const { dispatch } = useModalContext()\n\n  const closeModal = (id: string) => dispatch(ModalActionType.CloseModal, { id })\n  const closeAllModals = () => dispatch(ModalActionType.CloseAllModals)\n\n  return {\n    closeModal,\n    closeAllModals\n  }\n}","import { useMemo, useState } from 'react'\n\nimport { useModalContext } from '../context'\n\nexport const useModalIsLoading = (modalIds: string | string[]): boolean => {\n  const { state } = useModalContext()\n  return useMemo<boolean>(() => {\n    const ids: string[] = Array.isArray(modalIds) ? modalIds : [modalIds]\n    const modals = ids.map((id: string) => state.get(id)).filter(Boolean)\n\n    if (!modals.length) {\n      return false\n    }\n\n    return modals.some((modal) => modal?.isLazy ? modal.loading : false)\n  }, [state, modalIds])\n}","import React, { useState } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\ntype UseOpenModalReturn<T> = (id: string, props?: T) => void | undefined\n\nexport const useOpenModal = <T extends any>(): UseOpenModalReturn<T> => {\n  const [ loading, setLoading ] = useState<boolean>(false)\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const open = (id: string, props?: T): void | undefined => {\n    const modalItem = state.get(id)\n    const modalProps = props ?? {}\n\n    if (modalItem?.isLazy && !modalItem?.loaded && !modalItem.loading) {\n      const loader = modalItem.loader\n      dispatch(ModalActionType.LoadLazyModal, {\n        id\n      })\n\n      loader?.().then((instance) => {\n        dispatch(ModalActionType.LazyModalLoaded, {\n          id: modalItem.id,\n          component: instance.default,\n          loadFailed: false,\n          loaded: true\n        })\n\n        setTimeout(() => {\n          dispatch(ModalActionType.OpenModal, {\n            id,\n            props: modalProps\n          })\n        }, 30)\n      })\n      return\n    }\n\n    dispatch(ModalActionType.OpenModal, {\n      id,\n      props: modalProps\n    })\n  }\n\n  return open\n}","import React, { ComponentType, useEffect, useMemo, useRef } from 'react'\n\nimport { useModalContext } from '../context'\nimport { Importer } from '../types'\nimport { ModalActionType } from '../constants'\n\ninterface ModalRegisterItem {\n  readonly isLazy?: boolean\n  readonly component?: ComponentType\n  readonly loader?: Importer\n}\n\ntype RegisterModalInput = Record<string, ModalRegisterItem>\n\nexport const useRegisterModal = (modals: RegisterModalInput): void => {\n  const { dispatch, state } = useModalContext()\n  const mountRef = useRef<boolean>(false)\n\n  const diffModals = useMemo(() => {\n    return Object.keys(modals).reduce((result: RegisterModalInput, modalId: string) => {\n      if (state.get(modalId)) {\n        return result\n      }\n      \n      return {\n        ...result,\n        [modalId]: modals[modalId]\n      }\n    }, {})\n  }, [modals, state])\n\n  useEffect(() => {\n    Object.keys(diffModals).forEach((modalId: string) => {\n      const registerItem = diffModals[modalId]\n      const modalItem: Record<string, any> = {\n        id: modalId,\n        isLazy: registerItem.isLazy,\n        component: registerItem.component,\n        loader: registerItem.loader\n      }\n      if (modalItem.isLazy) {\n        modalItem.loaded = false\n        modalItem.loading = false\n        modalItem.loadFailed = false\n      }\n      dispatch(ModalActionType.RegisterModal, modalItem)\n    })\n  }, [diffModals])\n}\n","import React, { useCallback } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\n\ninterface UpdateModalInput<T> {\n  readonly merge?: boolean\n  readonly props: T\n}\n\ntype UseUpdateModalReturn<T> = (id: string, params: UpdateModalInput<T>) => void\n\nexport const useUpdateModal = <T>(): UseUpdateModalReturn<T> => {\n  const { state, dispatch } = useModalContext()\n\n  const update = useCallback((id, { merge, props }: UpdateModalInput<T>): void => {\n    dispatch(ModalActionType.UpdateModal, {\n      id,\n      props: (props as T)!,\n      __mergeProps___: merge\n    })\n  }, [state])\n\n  return update\n}"],"names":["ModalActionType","initialState","Map","reducer","produce","state","action","payload","payloadId","id","payloadProps","props","loader","component","loadFailed","shouldComponentLoad","loaded","__mergeProps___","allKeys","Array","from","keys","registed","has","currentModal","get","type","OpenModal","visible","Object","assign","set","UpdateModal","oldPorps","CloseModal","CloseAllModals","forEach","key","RegisterModal","RemoveModal","LoadLazyModal","loading","LazyModalLoaded","WrappedModal","render","renderProps","React","ModalAutoMounter","useModalContext","dispatch","defaultProps","mountableCompnent","useMemo","components","values","entry","push","createElement","useEffect","isLazy","then","instance","ModalContext","createContext","displayName","useContext","enableAllPlugins","children","useReducer","dispatchAction","useCallback","Provider","value","closeModal","closeAllModals","modalIds","modals","isArray","map","filter","Boolean","length","some","modal","useState","modalItem","modalProps","setTimeout","diffModals","useRef","reduce","result","modalId","registerItem","merge"],"mappings":"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"}