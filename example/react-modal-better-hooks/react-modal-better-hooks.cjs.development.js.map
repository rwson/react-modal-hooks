{"version":3,"file":"react-modal-better-hooks.cjs.development.js","sources":["../../src/constants.ts","../../src/reducer.ts","../../src/components/WrappedModal.tsx","../../src/components/ModalAutoMounter.tsx","../../src/context.tsx","../../src/hooks/useOpenModal.ts","../../src/hooks/useCloseModal.ts","../../src/hooks/useUpdateModal.ts","../../src/hooks/useModalIsLoading.ts","../../src/hooks/useRegisterModal.ts","../../src/index.ts"],"sourcesContent":["export enum ModalActionType {\n  OpenModal = 'OpenModal',\n  UpdateModal = 'UpdateModal',\n  CloseModal = 'CloseModal',\n  CloseAllModals = 'CloseAllModals',\n  RemoveModal = 'RemoveModal',\n  RegisterModal = 'RegisterModal',\n  LazyModalLoaded = 'LazyModalLoaded',\n  LoadLazyModal = 'LoadLazyModal'\n}\n","import { ComponentType } from 'react'\nimport produce from 'immer'\n\nimport { ModalActionType } from './constants'\nimport { Importer, ActionsMap, Actions, ModalItem, ModalStateMap } from './types'\n\nexport const initialState = new Map()\n\nexport const reducer = produce(\n  (state: ModalStateMap, action: Actions): ModalStateMap => {\n    const { id: payloadId, props: payloadProps, loader, component, loadFailed, shouldComponentLoad, loaded, __mergeProps___ } = action.payload ?? {}\n    const allKeys: Array<string> = Array.from(state.keys())\n    const registed: boolean = state.has(payloadId)\n\n    let currentModal: ModalItem | undefined = state.get(payloadId)\n\n    switch (action.type) {\n      case ModalActionType.OpenModal:\n        if (currentModal) {\n          currentModal.visible = true\n          currentModal.props = Object.assign({}, payloadProps ?? {})\n\n          state.set(payloadId, currentModal as ModalItem)\n        }\n\n        return state\n\n      case ModalActionType.UpdateModal:\n        if (currentModal) {\n          let oldPorps = {}\n          if (__mergeProps___) {\n            oldPorps = currentModal.props ?? {}\n          }\n          currentModal.props = Object.assign({}, oldPorps, payloadProps ?? {})\n          state.set(payloadId, currentModal as ModalItem)\n        }\n      return state\n\n      case ModalActionType.CloseModal:\n        if (currentModal) {\n          currentModal.visible = false\n          state.set(payloadId, currentModal)\n        }\n        return state\n\n      case ModalActionType.CloseAllModals:\n        allKeys.forEach((key: string) => {\n          currentModal = state.get(key) as ModalItem\n          currentModal.visible = false\n          state.set(key, currentModal)\n        })\n        return state\n\n      case ModalActionType.RegisterModal:\n        if (!registed) {\n          state.set(payloadId, {\n            ...action.payload,\n            id: payloadId,\n            props: {}\n          } as ModalItem)\n        }\n        return state\n\n      case ModalActionType.RemoveModal:\n        state.delete(payloadId)\n        return state\n\n      case ModalActionType.LoadLazyModal:\n        if (currentModal) {\n          currentModal.loading = true\n          currentModal.loadFailed = false\n        }\n        return state\n\n      case ModalActionType.LazyModalLoaded:\n        if (currentModal) {\n          currentModal.loaded = loaded\n          currentModal.loadFailed = loadFailed\n          currentModal.loading = false\n          currentModal.component = component\n          state.set(payloadId, currentModal as ModalItem)\n        }\n        return state\n\n      default:\n        return state\n    }\n  }\n)\n","import React, { FC, ReactElement } from 'react'\n\ninterface WrappedModalProps {\n  render: any\n  visible: boolean\n  renderProps?: Record<string, any>\n}\n\nexport const WrappedModal: FC<WrappedModalProps> = ({\n  render,\n  visible,\n  renderProps\n}): ReactElement | null => {\n  if (!visible || !render) {\n    return null\n  }\n\n  const props = Object.assign({}, (renderProps ?? {}), { visible })\n  return <>{render(props)}</>\n}\n","import React, { FC, useEffect, useMemo, createElement, ReactElement } from 'react'\n\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { ModalActionType } from '../constants'\nimport { WrappedModal } from './WrappedModal'\n\nexport const ModalAutoMounter: FC = () => {\n  const { state, dispatch, defaultProps } = useModalContext()\n  const mountableCompnent = useMemo(() => {\n    const entries: IterableIterator<ModalItem> = state.values()\n    const components: ReactElement[] = []\n\n    for (const entry of entries) {\n      if (entry.component) {\n        components.push(createElement(WrappedModal, {\n          ...(defaultProps || {}),\n          render: entry.component,\n          renderProps: entry.props,\n          visible: entry.visible,\n          key: entry.id\n        }))\n      }\n    }\n\n    return components\n  }, [state])\n\n  useEffect(() => {\n    const entries = state.values()\n\n    for (const entry of entries) {\n      if (entry.isLazy && !entry.loaded) {\n        dispatch(ModalActionType.LoadLazyModal, {\n          id: entry.id\n        })\n\n        const loader = entry.loader\n        loader?.().then((instance) => {\n          dispatch(ModalActionType.LazyModalLoaded, {\n            id: entry.id,\n            component: instance.default,\n            loadFailed: false,\n            loaded: true\n          })\n        })\n      }\n    }\n  }, [state])\n\n  return (\n    <>\n      {mountableCompnent}\n    </>\n  )\n}\n\n","import React, {\n  createContext,\n  useReducer,\n  useCallback,\n  useContext,\n  FC,\n  PropsWithChildren,\n} from 'react'\n\nimport {\n  reducer,\n  initialState\n} from './reducer'\nimport {\n  ModalStateMap,\n  Actions,\n  ActionsMap,\n  Dispatcher\n} from './types'\n\nimport { ModalAutoMounter } from './components/ModalAutoMounter'\n\nconst ModalContext = createContext<{\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: Record<string, any>\n}>({\n  state: initialState,\n  dispatch: () => undefined,\n  defaultProps: {},\n})\n\nModalContext.displayName = 'RMBH_Context'\n\nexport const ModalProvider: FC<PropsWithChildren<any>> = ({ children, defaultProps = {} }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  //  @ts-ignore\n  const dispatchAction: Dispatcher = useCallback((type, payload) => {\n    dispatch({ type, payload })\n  }, [])\n\n  const value = {\n    state,\n    defaultProps,\n    dispatch: dispatchAction,\n  }\n\n  return (\n    <ModalContext.Provider value={value}>\n      <>\n        <ModalAutoMounter />\n        {children}\n      </>\n    </ModalContext.Provider>\n  )\n}\n\nexport const useModalContext = (): {\n  state: ModalStateMap\n  dispatch: Dispatcher\n  defaultProps: Record<string, any>\n} => useContext(ModalContext)\n","import React, { useState } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\nimport { WrappedModalComponent } from '../wrapped'\n\ntype UseOpenModalReturn<T> = (id: string, props?: T) => void | undefined\n\nexport const useOpenModal = <T extends any>(): UseOpenModalReturn<T> => {\n  const [ loading, setLoading ] = useState<boolean>(false)\n  const { state, dispatch, defaultProps } = useModalContext()\n\n  const open = (id: string, props?: T): void | undefined => {\n    const modalItem = state.get(id)\n    const modalProps = props ?? {}\n\n    if (modalItem?.isLazy && !modalItem?.loaded && !modalItem.loading) {\n      const loader = modalItem.loader\n      dispatch(ModalActionType.LoadLazyModal, {\n        id\n      })\n\n      loader?.().then((instance) => {\n        dispatch(ModalActionType.LazyModalLoaded, {\n          id: modalItem.id,\n          component: instance.default,\n          loadFailed: false,\n          loaded: true\n        })\n\n        setTimeout(() => {\n          dispatch(ModalActionType.OpenModal, {\n            id,\n            props: modalProps\n          })\n        }, 30)\n      })\n      return\n    }\n\n    dispatch(ModalActionType.OpenModal, {\n      id,\n      props: modalProps\n    })\n  }\n\n  return open\n}","import { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\n\ninterface UseCloseModalReutrn {\n  closeModal(id: string): void\n  closeAllModals(): void\n}\n\nexport const useCloseModal = (): UseCloseModalReutrn => {\n  const { dispatch } = useModalContext()\n\n  const closeModal = (id: string) => dispatch(ModalActionType.CloseModal, { id })\n  const closeAllModals = () => dispatch(ModalActionType.CloseAllModals)\n\n  return {\n    closeModal,\n    closeAllModals\n  }\n}","import React, { useCallback } from 'react'\n\nimport { ModalActionType } from '../constants'\nimport { useModalContext } from '../context'\nimport { ModalItem } from '../types'\n\ninterface UpdateModalInput<T> {\n  readonly merge?: boolean\n  readonly props: T\n}\n\ntype UseUpdateModalReturn<T> = (id: string, params: UpdateModalInput<T>) => void\n\nexport const useUpdateModal = <T>(): UseUpdateModalReturn<T> => {\n  const { state, dispatch } = useModalContext()\n\n  const update = useCallback((id, { merge, props }: UpdateModalInput<T>): void => {\n    dispatch(ModalActionType.UpdateModal, {\n      id,\n      props: (props as T)!,\n      __mergeProps___: merge\n    })\n  }, [state])\n\n  return update\n}","import { useMemo, useState } from 'react'\n\nimport { useModalContext } from '../context'\n\nexport const useModalIsLoading = (modalIds: string | string[]): boolean => {\n  const { state } = useModalContext()\n  return useMemo<boolean>(() => {\n    const ids: string[] = Array.isArray(modalIds) ? modalIds : [modalIds]\n    const modals = ids.map((id: string) => state.get(id)).filter(Boolean)\n\n    if (!modals.length) {\n      return false\n    }\n\n    return modals.some((modal) => modal?.isLazy ? modal.loading : false)\n  }, [state, modalIds])\n}","import React, { ComponentType, useEffect, useMemo, useRef } from 'react'\n\nimport { useModalContext } from '../context'\nimport { Importer } from '../types'\nimport { ModalActionType } from '../constants'\n\ninterface ModalRegisterItem {\n  readonly isLazy?: boolean\n  readonly component?: ComponentType\n  readonly loader?: Importer\n}\n\ntype RegisterModalInput = Record<string, ModalRegisterItem>\n\nexport const useRegisterModal = (modals: RegisterModalInput): void => {\n  const { dispatch, state } = useModalContext()\n  const mountRef = useRef<boolean>(false)\n\n  const diffModals = useMemo(() => {\n    return Object.keys(modals).reduce((result: RegisterModalInput, modalId: string) => {\n      if (state.get(modalId)) {\n        return result\n      }\n      \n      return {\n        ...result,\n        [modalId]: modals[modalId]\n      }\n    }, {})\n  }, [modals, state])\n\n  useEffect(() => {\n    Object.keys(diffModals).forEach((modalId: string) => {\n      const registerItem = diffModals[modalId]\n      const modalItem: Record<string, any> = {\n        id: modalId,\n        isLazy: registerItem.isLazy,\n        component: registerItem.component,\n        loader: registerItem.loader\n      }\n      if (modalItem.isLazy) {\n        modalItem.loaded = false\n        modalItem.loading = false\n        modalItem.loadFailed = false\n      }\n      dispatch(ModalActionType.RegisterModal, modalItem)\n    })\n  }, [diffModals])\n}\n","import { enableAllPlugins } from 'immer'\n\nenableAllPlugins()\n\nexport { ModalProvider } from './context'\n\nexport { useOpenModal } from './hooks/useOpenModal'\nexport { useCloseModal } from './hooks/useCloseModal'\nexport { useUpdateModal } from './hooks/useUpdateModal'\nexport { useModalIsLoading } from './hooks/useModalIsLoading'\nexport { useRegisterModal } from './hooks/useRegisterModal'\n\nexport { ModalBasicProps } from './types'\n"],"names":["ModalActionType","initialState","Map","reducer","produce","state","action","payload","payloadId","id","payloadProps","props","loader","component","loadFailed","shouldComponentLoad","loaded","__mergeProps___","allKeys","Array","from","keys","registed","has","currentModal","get","type","OpenModal","visible","Object","assign","set","UpdateModal","oldPorps","CloseModal","CloseAllModals","forEach","key","RegisterModal","RemoveModal","LoadLazyModal","loading","LazyModalLoaded","WrappedModal","render","renderProps","React","ModalAutoMounter","useModalContext","dispatch","defaultProps","mountableCompnent","useMemo","entries","values","components","entry","push","createElement","useEffect","isLazy","then","instance","ModalContext","createContext","undefined","displayName","ModalProvider","children","useReducer","dispatchAction","useCallback","value","Provider","useContext","useOpenModal","useState","open","modalItem","modalProps","setTimeout","useCloseModal","closeModal","closeAllModals","useUpdateModal","update","merge","useModalIsLoading","modalIds","ids","isArray","modals","map","filter","Boolean","length","some","modal","useRegisterModal","mountRef","useRef","diffModals","reduce","result","modalId","registerItem","enableAllPlugins"],"mappings":"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"}